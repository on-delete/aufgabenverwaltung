package de.saxsys.service.epicservice;

import io.vertx.core.Vertx;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.jdbc.JDBCClient;
import io.vertx.ext.sql.SQLConnection;
import io.vertx.ext.unit.Async;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * Created by andre.krause on 03.08.2015.
 */
@RunWith(VertxUnitRunner.class)
public class UserStoryServiceTest {

	private static Vertx vertx = null;
	private static JDBCClient client = null;

	@BeforeClass
	public static void setUpClass(TestContext context){
		vertx = Vertx.vertx();
		client = JDBCClient.createShared(vertx, new JsonObject()
				.put("url", "jdbc:hsqldb:mem:test?shutdown=true")
				.put("driver_class", "org.hsqldb.jdbcDriver")
				.put("max_pool_size", 30), "aufgabenDB");

		client.getConnection(result -> {
			SQLConnection conn = result.result();
			conn.execute("create sequence u_id_squence", voidAsyncResult -> {
			});
			conn.execute("create table userstory(u_id bigint GENERATED BY DEFAULT AS SEQUENCE u_id_squence PRIMARY KEY, u_title varchar(255) NOT NULL, u_description varchar(255), u_priority varchar(255) NOT NULL, u_order int);", res -> {
				if (!res.succeeded())
					System.out.println(res.cause().getMessage());
			});
			conn.execute("create sequence t_id_squence", voidAsyncResult -> {
			});
			conn.execute("create table task(t_id bigint GENERATED BY DEFAULT AS SEQUENCE t_id_squence PRIMARY KEY, t_title varchar(255) NOT NULL, t_description varchar(255), t_priority varchar(255) NOT NULL, t_inCharge varchar(255), t_order int, u_id bigint NOT NULL, FOREIGN KEY(u_id) REFERENCES userstory(u_id) ON DELETE CASCADE);", res -> {
				if (!res.succeeded()) {
					System.out.println(res.cause().getMessage());
				}
			});
		});
	}

	@Before
	public void setUp(TestContext context) {
		vertx.deployVerticle(new UserStoryService(), context.asyncAssertSuccess());
	}

	@After
	public void tearDown(TestContext context) {
		vertx.close(context.asyncAssertSuccess());
	}

	@Test
	public void testAddUserstory(TestContext context){
		Async async = context.async();

		JsonObject jsonObject = new JsonObject("{\"request\":{\"title\":\"Story1\",\"description\":\"An userstory\",\"tasks\":[],\"priority\":\"HIGH\"}, \"order\":\"1\"}");
		vertx.eventBus().send("addUserstory", jsonObject, result -> {
			context.assertEquals("0", result.result().body().toString());

			vertx.eventBus().send("addUserstory", jsonObject, result2 -> {
				context.assertEquals("1", result2.result().body().toString());

				async.complete();
			});
		});
	}
}
